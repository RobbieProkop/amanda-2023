---
import { map } from "leaflet";
import "../styles/reviews.scss";
// import reviews from "../helpers/reviews";

const reviews = await Astro.glob("../helpers/reviews/*.md");
---

<section class="reviews">
  <div class="container">
    <h2>Kind Words</h2>
    <button class="carousel-button prev" id="prevRev">&#10140;</button>
    <button class="carousel-button next" id="nextRev">&#10140;</button>
    <div class="overlay" id="review-overlay">
      <div class="scroll-container" id="scroll-container">
        {
          reviews.map((review, index) => {
            const { Content, frontmatter } = review;
            if (index >= 5) {
              console.log("over");
              return;
            } else {
              return (
                <>
                  <article class="review-container">
                    <div class="review-item">
                      <Content />
                      <h3>{frontmatter.name}</h3>
                    </div>
                  </article>
                </>
              );
            }
          })
        }
      </div>
    </div>
    <a href="/testimonials"><p class="read-more">Read more testimonials</p></a>
    <!-- <div class="progress-bar" id="review-progress"></div> -->
    <!-- <button class="btn btn-third"
      ><a
        href="https://amandaprokop.janeapp.com/#staff_member/1"
        target="_blank">BOOK NOW</a
      ></button
    > -->
  </div>
</section>

<script>
  const container = document.getElementById("scroll-container") as HTMLElement;
  // const reviews = document.querySelectorAll(
  //   ".review-container"
  // ) as NodeListOf<Element>;
  // const progress = document.getElementById("review-progress") as HTMLElement;
  const overlay = document.getElementById("review-overlay") as HTMLElement;
  const nextBtn = document.getElementById("nextRev") as HTMLElement;
  const prevBtn = document.getElementById("prevRev") as HTMLElement;

  //touch elements
  let isDragging = false;
  let startX: number = 0;
  let endX: number = 0;
  // let progressItemCount: number;
  let currentIndex: number = parseInt(
    getComputedStyle(container).getPropertyValue("--carousel-index")
  );

  // Helper function to handle button clicks.
  // const handleButtonClick = (increment: number) => {
  //   currentIndex =
  //     (currentIndex + increment + progressItemCount) % progressItemCount;
  //   container.style.setProperty("--carousel-index", currentIndex.toString());
  //   calculateProgressBar();
  // };
  const handleButtonClick = (increment: number) => {
    currentIndex = (currentIndex + increment + 5) % 5;
    container.style.setProperty("--carousel-index", currentIndex.toString());
  };

  const handleSwipeGesture = () => {
    const swipeThreshold = 100;
    if (Math.abs(startX - endX) < swipeThreshold) return;
    if (startX > endX) return handleButtonClick(1);
    return handleButtonClick(-1);
  };

  // function to record starting X point
  const handleDragStart = (clientX: number) => {
    isDragging = true;
    startX = clientX;
  };

  // function to record ending X point
  const handleDragEnd = (clientX: number) => {
    if (!isDragging) return;
    isDragging = false;
    endX = clientX;
    handleSwipeGesture();
  };

  const handleDragMove = (clientX: number) => {
    if (!isDragging) return;
    endX = clientX;
  };

  // // Function to calculate and render progress bar.
  // const calculateProgressBar = () => {
  //   progressItemCount = container.children.length;

  //   progress.innerHTML = ""; // Clear current progress bar.

  //   // Create new progress bar items.
  //   for (let i = 0; i < progressItemCount; i++) {
  //     const barItem = document.createElement("div");
  //     barItem.classList.add("progress-item");
  //     barItem.setAttribute("data-index", i.toString());
  //     if (i === currentIndex) barItem.classList.add("active");
  //     progress.append(barItem);
  //   }
  // };

  // // Add event listener for click events on the progress bar.
  // progress.addEventListener("click", (e) => {
  //   const target = e.target as HTMLDivElement;
  //   const index = target.getAttribute("data-index");
  //   if (!index) return;

  //   currentIndex = parseInt(index);
  //   container.style.setProperty("--carousel-index", currentIndex.toString());
  //   calculateProgressBar();
  // });

  // // Call the function to initialize the progress bar.
  // calculateProgressBar();

  //Event Handlers
  overlay.addEventListener("touchstart", (e: TouchEvent) =>
    handleDragStart(e.changedTouches[0].clientX)
  );
  overlay.addEventListener("touchend", (e: TouchEvent) =>
    handleDragEnd(e.changedTouches[0].clientX)
  );
  overlay.addEventListener("mousedown", (e: MouseEvent) =>
    handleDragStart(e.clientX)
  );
  overlay.addEventListener("mouseup", (e: MouseEvent) =>
    handleDragEnd(e.clientX)
  );
  overlay.addEventListener("mousemove", (e: MouseEvent) =>
    handleDragMove(e.clientX)
  );
  // Add event listener for next button click.
  nextBtn.addEventListener("click", () => handleButtonClick(1));

  // Add event listener for previous button click.
  prevBtn.addEventListener("click", () => handleButtonClick(-1));
</script>
