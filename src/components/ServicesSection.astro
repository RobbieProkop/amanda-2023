---
import "../styles/services.scss";
import ServiceCard from "../components/ServiceCard.astro";
import services from "../helpers/servicesArr";
---

<section class="services">
  <div class="container">
    <h2>Services</h2>
    <button class="carousel-button prev" id="prev">&#10140;</button>
    <button class="carousel-button next" id="next">&#10140;</button>
    <div class="overlay" id="overlay">
      <div class="carousel" id="carousel-container">
        {
          services.map((service, index) => {
            return (
              <ServiceCard
                photo={service.photo}
                title={service.title}
                id={service.id}
                index={index}
              />
            );
          })
        }
      </div>
    </div>

    <!-- use JS to create teh progress bar -->
    <div class="progress-bar" id="progress"></div>
  </div>
</section>

<script>
  // Getting DOM elements.
  const container = document.getElementById(
    "carousel-container"
  ) as HTMLElement;
  const progress = document.getElementById("progress") as HTMLElement;
  const nextBtn = document.getElementById("next") as HTMLElement;
  const prevBtn = document.getElementById("prev") as HTMLElement;
  const overlay = document.getElementById("overlay") as HTMLElement;

  //touch elements
  let isDragging = false;
  let startX: number = 0;
  let endX: number = 0;

  const handleSwipeGesture = () => {
    const swipeThreshold = 5;
    if (Math.abs(startX - endX) < swipeThreshold) return;
    if (startX > endX) return handleButtonClick(1);
    return handleButtonClick(-1);
  };

  // function to record starting X point
  const handleDragStart = (clientX: number) => {
    isDragging = true;
    startX = clientX;
  };

  // function to record ending X point
  const handleDragEnd = (clientX: number) => {
    if (!isDragging) return;
    isDragging = false;
    endX = clientX;
    handleSwipeGesture();
  };

  const handleDragMove = (clientX: number) => {
    if (!isDragging) return;
    endX = clientX;
  };

  // Function to get current number of items per screen.
  const getItemsPerScreen = (): number =>
    parseInt(
      getComputedStyle(container).getPropertyValue("--items-per-screen")
    );

  let progressItemCount: number;
  let currentIndex: number = parseInt(
    getComputedStyle(container).getPropertyValue("--carousel-index")
  );

  // Function to calculate and render progress bar.
  const calculateProgressBar = () => {
    const itemsPerScreen = getItemsPerScreen();
    progressItemCount = Math.ceil(container.children.length / itemsPerScreen);

    progress.innerHTML = ""; // Clear current progress bar.

    // Create new progress bar items.
    for (let i = 0; i < progressItemCount; i++) {
      const barItem = document.createElement("div");
      barItem.classList.add("progress-item");
      barItem.setAttribute("data-index", i.toString());
      if (i === currentIndex) barItem.classList.add("active");
      progress.append(barItem);
    }
  };

  // Call the function to initialize the progress bar.
  calculateProgressBar();

  // Recalculate progress bar based on window size.
  window.addEventListener("resize", calculateProgressBar);

  // Add event listener for click events on the progress bar.
  progress.addEventListener("click", (e) => {
    const target = e.target as HTMLDivElement;
    const index = target.getAttribute("data-index");
    if (!index) return;

    currentIndex = parseInt(index);
    container.style.setProperty("--carousel-index", currentIndex.toString());
    calculateProgressBar();
  });

  // Helper function to handle button clicks.
  const handleButtonClick = (increment: number) => {
    currentIndex =
      (currentIndex + increment + progressItemCount) % progressItemCount;
    container.style.setProperty("--carousel-index", currentIndex.toString());
    calculateProgressBar();
  };

  //Event Handlers
  overlay.addEventListener("touchstart", (e: TouchEvent) =>
    handleDragStart(e.changedTouches[0].clientX)
  );
  overlay.addEventListener("touchend", (e: TouchEvent) =>
    handleDragEnd(e.changedTouches[0].clientX)
  );
  overlay.addEventListener("mousedown", (e: MouseEvent) =>
    handleDragStart(e.clientX)
  );
  overlay.addEventListener("mouseup", (e: MouseEvent) =>
    handleDragEnd(e.clientX)
  );
  overlay.addEventListener("mousemove", (e: MouseEvent) =>
    handleDragMove(e.clientX)
  );

  // Add event listener for next button click.
  nextBtn.addEventListener("click", () => handleButtonClick(1));

  // Add event listener for previous button click.
  prevBtn.addEventListener("click", () => handleButtonClick(-1));
</script>
