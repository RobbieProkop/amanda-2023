---
import "../styles/services.scss";
import ServiceCard from "../components/ServiceCard.astro";
import services from "../servicesArr";
---

<section class="services">
  <div class="container">
    <h2>Services</h2>
    <button class="carousel-button prev" id="prev">&#10140;</button>
    <button class="carousel-button next" id="next">&#10140;</button>

    <div class="carousel" id="carousel-container">
      {
        services.map((service, index) => {
          return (
            <ServiceCard
              photo={service.photo}
              title={service.title}
              id={service.id}
              index={index}
            />
          );
        })
      }
    </div>

    <!-- use JS to create teh progress bar -->
    <div class="progress-bar" id="progress"></div>
  </div>
</section>

<script>
  const container = document.getElementById(
    "carousel-container"
  ) as HTMLElement;
  const cards = Array.from(container.children) as HTMLElement[];
  const progress = document.getElementById("progress") as HTMLElement;
  const nextBtn = document.getElementById("next") as HTMLElement;
  const prevBtn = document.getElementById("prev") as HTMLElement;

  const initialItemsPerScreen = parseInt(
    getComputedStyle(container).getPropertyValue("--items-per-screen")
  );

  const getItemsPerScreen = () => {
    const computedStyle =
      getComputedStyle(container).getPropertyValue("--items-per-screen");
    const itemsPerScreen = parseInt(computedStyle);
    return itemsPerScreen;
  };
  const itemCount = container.children.length;
  let itemsPerScreen = getItemsPerScreen();
  let progressItemCount = Math.ceil(itemCount / itemsPerScreen);

  // current index to see which progress index we are on
  let currentIndex: number = parseInt(
    getComputedStyle(container).getPropertyValue("--carousel-index")
  );

  //calculate progress bar
  const calculateProgressBar = (
    progress: HTMLElement,
    progressItemCount: number
  ) => {
    progress.innerHTML = "";

    // Add an index to each progress bar item
    for (let i = 0; i < progressItemCount; i++) {
      const barItem = document.createElement("div");
      barItem.classList.add("progress-item");
      barItem.setAttribute("data-index", i.toString());

      if (i === currentIndex) {
        barItem.classList.add("active");
      }
      progress.append(barItem);
    }
  };

  // call the calculate function
  calculateProgressBar(progress, progressItemCount);
  // recalculate progress based on window size

  window.addEventListener("resize", () => {
    let itemsPerScreen = getItemsPerScreen();
    let progressCount = Math.ceil(itemCount / itemsPerScreen);
    calculateProgressBar(progress, progressCount);
  });

  progress.addEventListener("click", (e) => {
    const target = e.target as HTMLDivElement;

    const index = target.getAttribute("data-index");
    if (!index) return;

    const clickedIndex = parseInt(index);
    //update the currentIndex
    currentIndex = clickedIndex;
    container.style.setProperty("--carousel-index", currentIndex.toString());

    calculateProgressBar(progress, progressItemCount);
  });

  nextBtn.addEventListener("click", () => {
    if (currentIndex !== progressItemCount - 1) {
      container.style.setProperty(
        "--carousel-index",
        (currentIndex + 1).toString()
      );
      currentIndex += 1;
    } else {
      container.style.setProperty("--carousel-index", (0).toString());
      currentIndex = 0;
    }
    calculateProgressBar(progress, progressItemCount);
  });
  prevBtn.addEventListener("click", () => {
    if (currentIndex !== 0) {
      container.style.setProperty(
        "--carousel-index",
        (currentIndex - 1).toString()
      );
      currentIndex -= 1;
    } else {
      container.style.setProperty(
        "--carousel-index",
        (progressItemCount - 1).toString()
      );
      currentIndex = progressItemCount - 1;
    }

    calculateProgressBar(progress, progressItemCount);
  });

  // nextBtn.addEventListener("click", () => {
  //   let scrollWidth = container.offsetWidth;
  //   currentIndex = (currentIndex + 1) % cards.length;
  //   container.insertBefore(cards[currentIndex], null);
  //   container.scrollBy({
  //     left: scrollWidth,
  //     behavior: "smooth",
  //   });
  // });

  // prevBtn.addEventListener("click", () => {
  //   let scrollWidth = container.offsetWidth;
  //   currentIndex = (currentIndex - 1 + cards.length) % cards.length;
  //   container.insertBefore(cards[currentIndex], null);
  //   container.scrollBy({
  //     left: -scrollWidth,
  //     behavior: "smooth",
  //   });
  // });
</script>
