---
import "../styles/services.scss";
import ServiceCard from "../components/ServiceCard.astro";
import services from "../servicesArr";
---

<section class="services">
  <div class="container">
    <h2>Services</h2>
    <button class="carousel-button prev" id="prev">&#10140;</button>
    <button class="carousel-button next" id="next">&#10140;</button>

    <div class="carousel" id="carousel-container">
      {
        services.map((service, index) => {
          return (
            <ServiceCard
              photo={service.photo}
              title={service.title}
              id={service.id}
              index={index}
            />
          );
        })
      }
    </div>

    <!-- use JS to create teh progress bar -->
    <div class="progress-bar" id="progress"></div>
  </div>
</section>

<script>
  // Getting DOM elements.
  const container = document.getElementById(
    "carousel-container"
  ) as HTMLElement;
  const progress = document.getElementById("progress") as HTMLElement;
  const nextBtn = document.getElementById("next") as HTMLElement;
  const prevBtn = document.getElementById("prev") as HTMLElement;

  // Function to get current number of items per screen.
  const getItemsPerScreen = (): number =>
    parseInt(
      getComputedStyle(container).getPropertyValue("--items-per-screen")
    );

  let progressItemCount: number;
  let currentIndex: number = parseInt(
    getComputedStyle(container).getPropertyValue("--carousel-index")
  );

  // Function to calculate and render progress bar.
  const calculateProgressBar = () => {
    const itemsPerScreen = getItemsPerScreen();
    progressItemCount = Math.ceil(container.children.length / itemsPerScreen);

    progress.innerHTML = ""; // Clear current progress bar.

    // Create new progress bar items.
    for (let i = 0; i < progressItemCount; i++) {
      const barItem = document.createElement("div");
      barItem.classList.add("progress-item");
      barItem.setAttribute("data-index", i.toString());
      if (i === currentIndex) barItem.classList.add("active");
      progress.append(barItem);
    }
  };

  // Call the function to initialize the progress bar.
  calculateProgressBar();

  // Recalculate progress bar based on window size.
  window.addEventListener("resize", calculateProgressBar);

  // Add event listener for click events on the progress bar.
  progress.addEventListener("click", (e) => {
    const target = e.target as HTMLDivElement;
    const index = target.getAttribute("data-index");
    if (!index) return;

    currentIndex = parseInt(index);
    container.style.setProperty("--carousel-index", currentIndex.toString());
    calculateProgressBar();
  });

  // Helper function to handle button clicks.
  const handleButtonClick = (increment: number) => {
    currentIndex =
      (currentIndex + increment + progressItemCount) % progressItemCount;
    container.style.setProperty("--carousel-index", currentIndex.toString());
    calculateProgressBar();
  };

  // Add event listener for next button click.
  nextBtn.addEventListener("click", () => handleButtonClick(1));

  // Add event listener for previous button click.
  prevBtn.addEventListener("click", () => handleButtonClick(-1));
</script>
